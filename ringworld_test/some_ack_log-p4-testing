/* -*- P4_16 -*- */
// Credit: Base code come from p4 tutorial exercises
#include <core.p4>
#include <v1model.p4>

const bit<16> TYPE_TUNNEL = 0x1212;
const bit<16> TYPE_IPV4  = 0x800;
const bit<16> TYPE_CONTROL = 0x820;
const bit<16> TYPE_ACK = 0x840;
#define RACK_STORAGE_SERVERS 1
#define QUORUM_SIZE 3 // f+1
#define MAX_OUTSTANDING_APPENDS 10
#define MAX_HOPS 10
#define MAX_PORTS 8
#define NUM_SWITCHES 4
#define CPU_PORT 510

/*************************************************************************
*********************** H E A D E R S  ***********************************
*************************************************************************/

typedef bit<9>  egressSpec_t;
typedef bit<48> macAddr_t;
typedef bit<32> ip4Addr_t;

typedef bit<48> time_t;

header ethernet_t {
    macAddr_t dstAddr;
    macAddr_t srcAddr;
    bit<16>   etherType;
}

header ipv4_t {
    bit<4>    version;
    bit<4>    ihl;
    bit<8>    diffserv;
    bit<16>   totalLen;
    bit<16>   identification;
    bit<3>    flags;
    bit<13>   fragOffset;
    bit<8>    ttl;
    bit<8>    protocol;
    bit<16>   hdrChecksum;
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
}

// NOTE: added new header type
header myTunnel_t {
    bit<16> proto_id;
    bit<16> dst_id;
}

// Header for sequence number requests
header sequence_no_request_t {
    // Value which should be filled in by the switch with the next local sequence counter value
    bit<32> local_sequence_no;
}

// Header for control packet
// Currently, control packet is sometimes forwarded to the clients
header control_pkt_t {
   // Value of the global sequence number before the latest switch's local sequence cntr update
   // Meant to be read by clients
   bit<32> last_global_offset;
   
   // This is the current global sequence number.
   bit<32> global_seq_no;
}

// Header for updating tail
header tail_t {
   bit<32> tail;  // Sequence number of the tail of the log
}

// Header for ack rack packet
header ack_t {
    bit<32> seqno_ack; // Sequence number the server is acking. 
    // DUMB APPROACH: Currently repeats the ack MAX_OUTSTANDING num of times to iterate in the seqno
    bit<32> storage_server_id; // ID of the server in the rack
}

// Header: packet_out (read), packet_in (write) 


struct metadata {
    bit<32> ack_seq_no_idx;
}

struct headers {
    ethernet_t              ethernet;
    ack_t                   ack_tracker; // Only for in-rack packets
    control_pkt_t           cntrl;
    tail_t                  update_tail;
    myTunnel_t              myTunnel;
    ipv4_t                  ipv4;
}

/*************************************************************************
*********************** P A R S E R  ***********************************
*************************************************************************/

parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {


    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);
        // TODO: Add another EtherType for counting Acks
        transition select(hdr.ethernet.etherType) {
            TYPE_TUNNEL: parse_tunnel;
	    TYPE_IPV4: parse_ipv4;
	    TYPE_CONTROL: parse_control;
	    TYPE_ACK: parse_ack;
            default: accept;
        }
    }

    state parse_ack {
	packet.extract(hdr.ack_tracker);
	meta.ack_seq_no_idx = 0;
	transition parse_control;
    }

    state parse_control {
	packet.extract(hdr.cntrl);
 	transition parse_update_tail;
    }
    
    state parse_update_tail {
	packet.extract(hdr.update_tail);
 	transition parse_tunnel;
    }

    state parse_tunnel {
	packet.extract(hdr.myTunnel);
	transition select(hdr.myTunnel.proto_id) {
	    0x0800: parse_ipv4;
	    default: accept;
	}
    }

    state parse_ipv4 {
        packet.extract(hdr.ipv4);
        transition accept;
    }
}

/*************************************************************************
************   C H E C K S U M    V E R I F I C A T I O N   *************
*************************************************************************/

control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
    apply {  }
}


/*************************************************************************
**************  I N G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyIngress(inout headers hdr,
                  inout metadata meta,
            

    inout standard_metadata_t standard_metadata) {
    /** Registers **/
    // Sequence number registers
    register<bit<32>>(1) local_seq_cntr_reg; // Rack local sequence number. Reset each time it's added to global counter
    register<bit<32>>(1) last_seen_global_seq_no_reg; // Global sequence number. Updated every time control packet is received


    // Acking register: 2D array tracking outstanding appends from the rack's storage servers. 
    // Updated each time a packet with an ack_t header is received.
    // If an outstanding append reaches a quorum of acks, it is replaced with the next highest seq_no with outstanding acks
    // and all ack entries for the servers are set to zero.
    register<bit<MAX_OUTSTANDING_APPENDS>>(QUORUM_SIZE) acks_reg;    
    register<bit<MAX_OUTSTANDING_APPENDS>>(QUORUM_SIZE) is_ack_done_reg;
    register<bit<MAX_OUTSTANDING_APPENDS>>(1) ack_counter; 
    register<bit<32>> most_recent_acked_seqno; // To prevent processing stale acks 

    // Tail registers
    // Latest tail tracked by switch
    // Updated either by external packet reporting higher tail or local ack counter reaching quorum threshold
    register<bit<32>>(1) log_tail_reg;
    // Locally tracks number of acks until tail can advance
    register<bit<32>>(1) log_next_tail_acks_reg;

    action drop() {
        mark_to_drop(standard_metadata);
    }

    // TODO: Make this infinite
    action ipv4_forward(macAddr_t dstAddr, egressSpec_t port) {
        standard_metadata.egress_spec = port;
        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;
        hdr.ethernet.dstAddr = dstAddr;
        hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
    }

    table ipv4_lpm {
        key = {
            hdr.ipv4.dstAddr: lpm;
        }
        actions = {
            ipv4_forward;
            drop;
            NoAction;
        }
        size = 1024;
        default_action = drop();
    }
   
    action myTunnel_forward(egressSpec_t port) {
	standard_metadata.egress_spec = port;
    }

    table myTunnel_exact {
	key = {
	   hdr.myTunnel.dst_id: exact;
	}
	actions = {
	   myTunnel_forward;
	   drop;
	}
	size = 1024;
	default_action = drop();
    }

    apply {
        if (hdr.cntrl.isValid()) {
	    bit<32> seq_no;
	    rack_seq_no_reg.read(seq_no, 0);
	    // Updating the global sequence counter
	    seq_no = seq_no + hdr.seqno.seq_no;
	    hdr.cntrl.global_seq_no = seq_no;
	    global_seq_no_reg.write(0, seq_no);
	    } else {
		// Updating the rack local sequence counter
	        bit<32> global_seq_no;
		global_seq_no_reg.read(global_seq_no, 0);
		seq_no = seq_no + 1;
		rack_seq_no_reg.write(0, seq_no);
		seq_no = global_seq_no + seq_no;
		hdr.seqno.seq_no = seq_no;
	    }
        }

	if (hdr.update_tail.isValid()) {
	    bit<32> tail;
	    log_tail_reg.read(tail, 0);
	    if (hdr.update_tail.tail > tail) {
		tail = hdr.update_tail.tail;
		log_tail_reg.write(0, tail);
	    } else if (tail > hdr.update_tail.tail) {
	        hdr.update_tail.tail = tail;
	    }
	}

	if (hdr.ack_tracker.isValid()) { // TODO COMMENT
	    // Ack_tracker will have: storage_server_id, seqno
	    // Determine what storage server this is related to
	    bit<32> storage_id_idx;
	    hash.mod(storage_id_idx, HashAlgorithm.identity, 0, {hdr.ack_tracker.storage_server_id}, QUORUM_SIZE); // TODO: Check this

	    // Determine what sequence number is being appended
	    int<32> idx_of_seqno;
 	    hash.mod(idx_of_seqno, HashAlgorithm.identity, 0, {hdr.ack_tracker.seqno}, MAX_OUTSTANDING_APPENDS); // TODO: Check this
	    bit<MAX_OUTSTANDING_APPENDS> is_ack_done_ss;
	    is_ack_done_reg.read(storage_id_idx, is_ack_done_ss);
	



	    // Update the counter for that sequence number
            bit<MAX_OUTSTANDING_APPENDS> storage_server_acks;
	    acks_reg.read(storage_id_idx, storage_server_acks);
	    storage_server_acks 
	    rack_acks_reg.write(MAX_OUTSTANDING_APPENDS*hdr.ack_tracker.storage_server_id + meta.ack_seq_no_idx, 1);
	}

	if (hdr.ipv4.isValid()) {
            ipv4_lpm.apply();
        }

 	if (hdr.myTunnel.isValid()) {
	    myTunnel_exact.apply();
	} 
    }
}

/*************************************************************************
****************  E G R E S S   P R O C E S S I N G   ********************
*************************************************************************/

control MyEgress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t standard_metadata) {
	apply { } // TODO: Add acking packets here for sequence counters
}

/*************************************************************************
*************   C H E C K S U M    C O M P U T A T I O N   ***************
*************************************************************************/

control MyComputeChecksum(inout headers  hdr, inout metadata meta) {
     apply {
        update_checksum(
            hdr.ipv4.isValid(),
            { hdr.ipv4.version,
              hdr.ipv4.ihl,
              hdr.ipv4.diffserv,
              hdr.ipv4.totalLen,
              hdr.ipv4.identification,
              hdr.ipv4.flags,
              hdr.ipv4.fragOffset,
              hdr.ipv4.ttl,
              hdr.ipv4.protocol,
              hdr.ipv4.srcAddr,
              hdr.ipv4.dstAddr },
            hdr.ipv4.hdrChecksum,
            HashAlgorithm.csum16);
    }
}

/*************************************************************************
***********************  D E P A R S E R  *******************************
*************************************************************************/

control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr.ethernet);
	packet.emit(hdr.seqno);
	packet.emit(hdr.update_tail);
	packet.emit(hdr.myTunnel);
        packet.emit(hdr.ipv4);
    }
}

/*************************************************************************
***********************  S W I T C H  *******************************
*************************************************************************/

V1Switch(
MyParser(),
MyVerifyChecksum(),
MyIngress(),
MyEgress(),
MyComputeChecksum(),
MyDeparser()
) main;
